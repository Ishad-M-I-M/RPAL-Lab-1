let rec firstDigit n = ( n ge 0 & n < 10) -> n | firstDigit (n/10)
and
rec power n = ( n ge 0 & n < 10) -> 0 | (1+ (power (n/10)))
in
let rec lastDigit n = ( n ge 0 & n < 10) -> n | lastDigit (n - ((firstDigit n) * 10 ** (power n)))
in
let remain n = (n - ((firstDigit n) * 10 ** (power n)))/10
in
let rec isPalindrome n = (n < 10 & n ge 0) -> true |
			((firstDigit n) eq (lastDigit n)) -> (isPalindrome (remain n)) | false
in
let palindromes n m = getPalindromes n m nil
    where rec getPalindromes t m a = ( m < t ) -> a |
                                ( isPalindrome t) ->  (getPalindromes (t+1) m (a aug t)) |
                                                        (getPalindromes (t+1) m a)
in
Print ( palindromes 100 200)